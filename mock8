import static org.mockito.Mockito.*;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.StepExecution;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.item.database.JdbcCursorItemReader;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = BatchConfiguration.class)
public class BatchConfigurationTest {

    private BatchConfiguration batchConfiguration;
    private StepBuilderFactory stepBuilderFactory;

    @Before
    public void setUp() {
        batchConfiguration = new BatchConfiguration();
        stepBuilderFactory = mock(StepBuilderFactory.class);
    }

    @Test
    public void testGetSteps() throws Exception {
        String[] databases = {"db1", "db2", "db3"};

        JdbcCursorItemReader<BatchConfiguration.SqlResponseDto> reader = mock(JdbcCursorItemReader.class);
        when(reader.setDataSource(any())).thenReturn(reader);
        when(reader.setSql(anyString())).thenReturn(reader);
        when(reader.setRowMapper(any(BatchConfiguration.SqlResponseRowMapper.class))).thenReturn(reader);

        Step[] steps = batchConfiguration.getSteps(databases, reader, stepBuilderFactory);

        // Verify that the correct number of steps is created
        assertEquals(databases.length, steps.length);

        // Verify step properties for each created step
        for (int i = 0; i < databases.length; i++) {
            Step step = steps[i];
            assertNotNull(step);
            assertEquals("step" + (i + 1), step.getName());

            // Verify step listener and other properties if needed
            // ...

            // Verify reader, processor, and writer
            assertEquals(reader, step.getReader());
            // Verify other components if needed
            // ...
        }
    }

    @Test
    public void testSqlResponseRowMapper() throws SQLException {
        BatchConfiguration.SqlResponseRowMapper rowMapper = batchConfiguration.new SqlResponseRowMapper();
        ResultSet resultSet = mock(ResultSet.class);

        // Set up mocked ResultSet values
        when(resultSet.getString("DB_NAME")).thenReturn("dbName");
        // Set other mocked ResultSet values if needed
        // ...

        // Call the row mapper
        BatchConfiguration.SqlResponseDto dto = rowMapper.mapRow(resultSet, 0);

        // Verify the mapped values
        assertEquals("dbName", dto.getDbName());
        // Verify other mapped values if needed
        // ...
    }
}











@Test
    public void testGetSteps() throws Exception {
        String[] databases = {"db1", "db2", "db3"};

        JdbcCursorItemReader<BatchConfiguration.SqlResponseDto> reader = mock(JdbcCursorItemReader.class);
        when(reader.setDataSource(any())).thenReturn(reader);
        when(reader.setSql(anyString())).thenReturn(reader);
        when(reader.setRowMapper(any(BatchConfiguration.SqlResponseRowMapper.class))).thenReturn(reader);

        ItemWriter<ParticipantResponseDto> writer = mock(ItemWriter.class);
        ItemProcessor<BatchConfiguration.SqlResponseDto, ParticipantResponseDto> processor = mock(ItemProcessor.class);

        Step[] steps = batchConfiguration.getSteps(databases, reader, processor, writer, stepBuilderFactory);

        // Verify that the correct number of steps is created
        assertEquals(databases.length, steps.length);

        // Verify step properties for each created step
        for (int i = 0; i < databases.length; i++) {
            Step step = steps[i];
            assertNotNull(step);
            assertEquals("step" + (i + 1), step.getName());

            // Verify step listener and other properties if needed
            // ...

            // Verify reader, processor, and writer through StepExecution
            StepExecution stepExecution = mock(StepExecution.class);
            when(stepExecution.getReader()).thenReturn(reader);
            assertEquals(reader, stepExecution.getReader());
            assertEquals(processor, step.getTasklet().getClass().getMethod("getDelegate").invoke(step.getTasklet()));
            assertEquals(writer, step.getTasklet().getClass().getMethod("getDelegate").invoke(step.getTasklet()));
        }
    }
    
    
    ------------------------------------------------------------------------------------------------------------------------------
    
     @Autowired
    private BatchConfiguration batchConfiguration;

    @MockBean
    private StepExecution stepExecution;

    @Before
    public void setUp() {
        // Set up mock behavior for the StepExecution object
        when(stepExecution.getJobExecution().getExecutionContext().getString("database"))
                .thenReturn("db1");
    }

    @Test
    public void testParticipantReader() throws Exception {
        // Mock the necessary dependencies
        JdbcCursorItemReader<SqlResponseDto> reader = mock(JdbcCursorItemReader.class);
        when(reader.setDataSource(null)).thenReturn(reader); // Provide your own DataSource mock or null

        RowMapper<SqlResponseDto> rowMapper = mock(RowMapper.class);
        when(reader.setRowMapper(rowMapper)).thenReturn(reader);

        // Call the participantReader method
        JdbcCursorItemReader<SqlResponseDto> result = batchConfiguration.participantReader(stepExecution, null);
        assertNotNull(result);

        // Verify the behavior and properties of the JdbcCursorItemReader
        assertEquals(reader, result);
        assertEquals(rowMapper, result.getRowMapper());
    }

    // Additional test methods can be added for other beans and configurations in BatchConfiguration
    // ...
}
