import com.empowerretirement.moneyout.restclient.IncomeFlexRestClient;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.http.*;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class IncomeFlexRestClientTest {

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private SecurityRestClient securityRestClient;

    @Test
    void testGetIncomeFlexInfo_Success() {
        // Create an instance of the IncomeFlexRestClient
        IncomeFlexRestClient incomeFlexRestClient = new IncomeFlexRestClient();
        incomeFlexRestClient.restTemplate = restTemplate;
        incomeFlexRestClient.securityRestClient = securityRestClient;
        incomeFlexRestClient.incomeflexBaseUrl = "http://example.com/api";
        incomeFlexRestClient.setJWTToken("dummy-token");

        // Mock the response entity
        String responseBody = "Response Body";
        ResponseEntity<String> responseEntity = new ResponseEntity<>(responseBody, HttpStatus.OK);
        when(restTemplate.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(String.class)))
                .thenReturn(responseEntity);

        // Call the method under test
        String result = incomeFlexRestClient.getIncomeFlexInfo("indId", "gaId", "dbName");

        // Verify the interactions and assertions
        verify(restTemplate, times(1))
                .exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(String.class));

        assertEquals(responseBody, result);
    }

    @Test
    void testGetIncomeFlexInfo_UnauthorizedRetry() {
        // Create an instance of the IncomeFlexRestClient
        IncomeFlexRestClient incomeFlexRestClient = new IncomeFlexRestClient();
        incomeFlexRestClient.restTemplate = restTemplate;
        incomeFlexRestClient.securityRestClient = securityRestClient;
        incomeFlexRestClient.incomeflexBaseUrl = "http://example.com/api";
        incomeFlexRestClient.setJWTToken("expired-token");

        // Mock the response entity
        String responseBody = "Unauthorized Error";
        HttpStatus unauthorizedStatus = HttpStatus.UNAUTHORIZED;
        HttpClientErrorException exception = new HttpClientErrorException(unauthorizedStatus, responseBody);
        when(restTemplate.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(String.class)))
                .thenThrow(exception)
                .thenReturn(ResponseEntity.ok().body("Success"));

        // Mock the token refresh
        String refreshedToken = "refreshed-token";
        when(securityRestClient.jwtProvider()).thenReturn(refreshedToken);

        // Call the method under test
        String result = incomeFlexRestClient.getIncomeFlexInfo("indId", "gaId", "dbName");

        // Verify the interactions and assertions
        verify(restTemplate, times(2))
                .exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(String.class));
        verify(securityRestClient, times(1)).jwtProvider();

        assertEquals("Success", result);
        assertEquals(refreshedToken, incomeFlexRestClient.jwtToken);
    }
}


 @Test
    void testGetIncomeFlexInfo_FirstTimeTokenSet() {
        // Set jwtToken to null to simulate the first-time token set
        incomeFlexRestClient.jwtToken = null;

        // Mock the response entity
        String responseBody = "Response Body";
        ResponseEntity<String> responseEntity = new ResponseEntity<>(responseBody, HttpStatus.OK);
        when(restTemplate.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(String.class)))
                .thenReturn(responseEntity);

        // Mock the token provider
        String jwtToken = "dummy-token";
        when(securityRestClient.jwtProvider()).thenReturn(jwtToken);

        // Call the method under test
        String result = incomeFlexRestClient.getIncomeFlexInfo("indId", "gaId", "dbName");

        // Verify the interactions and assertions
        verify(restTemplate, times(1))
                .exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(String.class));
        verify(securityRestClient, times(1)).jwtProvider();

        assertEquals(responseBody, result);
        assertEquals(jwtToken, incomeFlexRestClient.jwtToken);
    }
}
