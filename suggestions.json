{
  "ddrv": {
    "title": "DDRV",
    "header": "DDRV Troubleshooting Steps",
    "body": "<ul> <li> <strong>Whether the job is re-startable?</strong> <p>Yes, requires investigation before restart.</p> </li> <li> <strong>All steps required to troubleshoot the job, in case of failure:</strong> <ul> <li>Follow restart instructions reference in the email sent by prodsupp when the job fails.</li> <li>Check the error log, identify the root cause for the job failure, provide the analysis and perform next steps of actions accordingly.</li> <li>Restart can be done only if there are no other Control Jobs (GQXXDDRV) running.</li> <li>If any another job DDRV CONTROL/DDRV REBUILD CONTROL job is running: <ul> <li>Terminate the failed DDRV CONTROL/DDRV REBUILD CONTROL Program.</li> <li>Determine why two jobs ran.</li> <li>Fix the problem to ensure multiple DDRV CONTROL/DDRV REBUILD.</li> </ul> </li> <li>To Restart a control job, a file must be created to indicate that you are running a restart. <ul> <li>normal run = touch $ISIS_HOME/tmp/db/ddrv_restart.</li> <li>rebuilder run = touch $ISIS_HOME/tmp/db/ddrv_rbd_restart.</li> <li>future rebuilder run = touch $ISIS_HOME/tmp/db/ddrv_future_rbd_restart.</li> </ul> </li> <li>Restart from the critical queue. <ul> <li>If only a particular stream has failed or few disbursements were not processed, then we can restart that stream job alone. Normal restart will spin all stream job and might take long time to reach a particular stream. <ul> <li>To restart a stream job, we have to touch the below 2 files under /opt/401k/tmp/db path and add the below 4 lines in ddrv_cntrl_job26 file, then we can restart only stream 26 job.</li> </ul> </li> <li>touch ddrv_restart.</li> <li> touch ddrv_cntrl_job26.</li> <p> JOB: 26</p><p>PID:</p><p>PGRM_STS:</p><p>HOST</p> <li> If control files already exist, it indicates jobs must be restarted. Hence control job will look for restart file. If restart file exists, stream jobs will be restarted, else error will be thrown.</li> <li> Debug file is required to get details about where the job has failed. To get the debug, we need to create an SR for production support team with required debug variables set.</li> <p> setenv DDRV_COMMIT FALSE </p><p>setenv DDRV_DEBUG_LEVEL MAX </p><p>setenv IOBL_DEBUG MAX </p><p> setenv CIOA_DEBUG TRUE </p><li>$ISIS_HOME/bin/DDRV -I dsba_id.</li> <li>Important Queries </li> <p>Count: SELECT COUNT(DISTINCT db.ev_id) FROM disb_basic db, disb_detl  dd WHERE db.id = dd.dsba_id AND db.status_code = 'FUTURE' AND db.next_sched_pay_due_date <= sysdate; </p><p> Impacted amount: SELECT  SUM(dd.disb_amt) FROM disb_basic db, disb_detl  dd WHERE db.id = dd.dsba_id AND db.status_code = 'FUTURE’ AND db.NEXT_SCHED_PAY_DUE_DATE <= SYSDATE; </p> </ul> </li> </ul> </li> </ul>"
  },
  "bppl": {
    "title": "BPPL",
    "header": "BPPL Troubleshooting Steps",
    "body": "<ul> <li> <strong>Whether the job is re-startable?</strong> <p>Yes, requires investigation before restart.</p> </li> <li> <strong>All steps required to troubleshoot the job, in case of failure:</strong> <ul> <li>Get the cycle number from below query:</li> <p>SELECT next_cycle_nbr FROM acctg_frs_cycle WHERE module_name like '%BPPL';</p> <li>If it was already incremented in prior run, then cycle_nbr must be decremented before restart because it must match with SAP data.</li> <li>Delete file from $ISIS_HOME/data/ap directory then restart the job from the top.</li> <li>If a prior BPPL Cycle needs to be recreated because of any reason: <ul> <li>Rename the existing file by adding extension \".bad\" to it.</li> <li>Identify the master pull event id of the cycle to be recreated from the above previous query. It can be done by searching the event table. The Narrative field contains this text - \"SAP BP Pull Cycle= ???\" where the ??? identifies the cycle number. Below is the query example:</li> <p>SELECT id FROM event WHERE narrative = 'sap BP Pull cycle = xxx';</p> <p>xxx refers to cycle number obtained from prior query.</p> <li>This event which was created during normal run will also be used to update the ap_acty table. Use the above master event id to query ap_acty table to get how many records will be reprocessed.</li> <p>SELECT * FROM ap_acty WHERE sap_master_data_pull_ev_id = xxx; xxx – refers to event pulled from previous query.</p> </ul> </li> <li>Edit the Autosys environment file for the BPPL job and change the BPPL_MODE variable to be \"R\" and the BPPL_EV_ID to be the value identified from the event table. <ul> <li>After the BPPL file is recreated, be sure to reset the BPPL_MODE and BPPL_EV_ID back to their original values of \"C\" and 0.</li> <li>Once this is done, the job can be restarted from the top (remove the current file from $SIS_HOME/data/ap and restart the box from the top).</li> <li>Include queries for each step, wherever applicable</li> </ul> </li> <li>Below pre and post queries can be used for general monitoring of the batch to see the count reducing for pre query when the batch processes the records and count of post query increasing for the processed records simultaneously. <ul> <li>Pre query: <ul> <li>SELECT COUNT(*) FROM ap_acty aa WHERE sap_master_data_pull_code IS NOT NULL AND sap_master_data_pull_ev_id IS NULL;</li> </ul> </li> <li>Post Query:</li> <li>Debug file is required to get details about where the job has failed. To get the debug, we need to create an SR for production support team with required debug variables set.</li> </ul> </li> </ul> </li> </ul>"
  },
  "grsu": {
    "title": "GRSU",
    "header": "GRSU Troubleshooting Steps",
    "body": "<ul> <li> <strong>Whether the job is re-startable?</strong> <p>Yes, requires investigation before restart.</p> </li> <li> <strong>All steps required to troubleshoot the job, in case of failure:</strong> <ul> <li>We will enable debug log . In order log file to get generated, we will set GRSU_DEBUG_LEVEL = MAX in environment file and GRSU_MAX_STREAM = 5 ( 5 for production, 1 for development ).</li> <li>We will go to debug log  and grep error in log and try to identify issue.</li> <li>We can count record from above driving query. If the count of above query becomes zero, job ran successfully.</li> <li>Solution : GRSU create child event for a master event id. In case, child event id encounter error, we will update cancel date column from event table to ‘SYSDATE’. <ul> <li>Include queries for each step, wherever applicable :</li> <li> In case of Job failure  run below query :</li> <p>UPDATE event SET cncl_date = sysdate, cncl_rsn_code = 'CANCELED’, narrative = Narrative, WHERE id = XXXXXXXXX;   (EV_ID)</p> <p>Impacted events: SELECT COUNT(DISTINCT e.id) FROM event      e, step       s, step_type  st, individual i WHERE e.evty_code IN ( 'GRP_DEMIN', 'GRP_OPTIN' ) AND e.compltn_date IS NULL AND e.cncl_date IS NULL AND s.ev_id = e.id AND s.sety_code IN ( 'GRPDMINAFO', 'GRPOPTINDB' ) AND s.due_date <= trunc(sysdate) AND s.compltn_date IS NULL AND st.code = s.sety_code AND st.evty_code = s.evty_code AND i.id = to_number( e.subject_id ); </p> </ul> </li>  </ul> </li> </ul>"
  },
  "tadb": {
    "title": "TADB",
    "header": "TADB Troubleshooting Steps",
    "body": "<ul> <li> <strong>Whether the job is re-startable?</strong> <p>Yes.</p> </li> <li> <strong>All steps required to troubleshoot the job, in case of failure:</strong> <ul> <li>Check all the events in TRAILING status</li> <p>SELECT ev_id,status_code,next_sched_pay_due_date FROM disb_basic WHERE status_code like '%TRAILING%' and NEXT_SCHED_PAY_DUE_DATE <= trunc(sysdate);</p> <li>If there are events for the current day we need to check the logs to see why weren't they picked/failed.</li> <li>Get the logs enabled by Prodsupp and re-run the job. Logs will be generated in $ISIS_HOME/tmp/db directory.</li> <li>Logs will help us understand why the job had failed. <ul> <li>If the no. of events are too much, we need to immediately check the reason of failure as the amount held could be too much.</li> <li>If there is an event causing the issue we would hide the event and update the status_code to our USER_ID:</li> <p>UPDATE DISB_BASIC set STATUS_CODE = USER_ID where ev_id in (list of events);</p><li>Post Hiding the events please ask ProdSupp to restart the job. The job should run to success and batch should progress. After this we need to check the events and identify why they caused the failure, source of the events and creators of the events</li> </ul> </li> </ul> </li> </ul>"
  },
  "grlt": {
    "title": "GRLT",
    "header": "GRLT Troubleshooting Steps",
    "body": "<ul> <li> <strong>Whether the job is re-startable?</strong> <p>Yes.</p> </li> <li> <strong>All steps required to troubleshoot the job, in case of failure:</strong> <ul> <li>Get count of all the GRP_DEMIN LETTERs to be processed</li> <p>SELECT count(DISTINCT e.id) FROM event e,step s,step_type st,individual i,group_account ga WHERE e.evty_code in ('GRP_DEMIN', 'GRP_TERM') AND s.sety_code in ('GRPDMINLTR', 'GRPTERMLTR') AND e.compltn_date is null AND e.cncl_date is null AND e.id = s.ev_id AND e.subject_id = i.id AND s.due_date <= trunc(sysdate) AND s.compltn_date is null AND s.sety_code = st.code AND s.evty_code = st.evty_code AND e.sub_subject_id = ga.id;</p> <li>Check if the logs are enabled (GRLT_DEBUG_LEVEL needs to be MAX) in env file.</li> <li>If not, ask ProdSupp to enable the logs and restart the job.</li> <li>Post this logs should be generated in $ISIS_HOME/tmp/db. The log name should be like GRLT_nobody_% <ul> <li>Understanding the logs will help us figure out the issue. Check if the logs are ending abruptly.</li> <li>If they do it denotes core dump. Check for the place the code is failing and see if there is a memory mismanagement. If so turning off the logs and running the job again will fix the issue.</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"
  },
  "ppay": {
    "title": "PPAY",
    "header": "PPAY Troubleshooting Steps",
    "body": "<ul> <li> <strong>Whether the job is re-startable?</strong> <p>The Job is re-start able. Steps to restart the Job. Reset/re-run PPAY_PM</p> </li> <li> <strong>All steps required to troubleshoot the job, in case of failure:</strong> <ul> <p>1) Ensure that there are in fact no PPAY jobs running on the system</p> <p>- you must check for jobs running on production machines from a unix prompt, not just by checking in the job scheduler</p> <p>2) Look in $ISIS_HOME/data/db for file PPAY.lck</p><p>3) If PPAY.lck exists, remove the file.</p><p>4) Restart the ppay job.</p> <li>Impacted amount cannot be determined in case of failure of the job, since the job creates child events and disbursement records as a part of its processing. However, this can be determined post successful completion of this job. Below query will give amount of MASTER events: <p>SELECT ev_id, ind_id, ppay_per_period_amt FROM txn_rule_acty tra, individual    i, disb_detl     dd, disb_basic    db WHERE db.status_code = 'MASTER' AND db.rnwl_id IS NULL AND db.dsmd_code = 'PER PAYT' AND db.id = ‘all’ AND db.termdate IS NULL OR db.termdate >= db.next_sched_pay_due_date AND i.id = db.ind_id AND tra.dsba_id (+) = db.id AND tra.std_rl_id (+) = db.ppay_std_rl_id AND dd.dsba_id = db.id AND nvl(     dd.disb_order_seqnbr, 0 ) = 0 AND dd.status_code IN ( 'PENDING', 'CASHRECD' ) AND dd.notify_date <= to_date(     sysdate, 'DD-MON-YYYY' ) AND NOT EXISTS (     SELECT         1     FROM         event      e,         disb_basic db1     WHERE         e.master_ev_id = db.id         AND e.id = db1.ev_id         AND db.next_sched_pay_due_date = db1.next_sched_pay_due_date );</p><ul> <li>Impacted List: </li> <p>SELECT DISTINCT db.id                       dsba_id,  db.disb_type, db.ev_id, db.gc_id, db.ind_id, db.ppay_std_rl_id, db.ppay_first_effdate_or_ind ppay_lag_or, i.ssn, tra.id                       txn_rl_id FROM txn_rule_acty tra, individual    i, disb_detl     dd, disb_basic    db WHERE db.status_code = 'MASTER' AND db.rnwl_id IS NULL AND db.dsmd_code = 'PER PAYT' AND db.id = ‘all’ AND nvl(     db.termdate, db.next_sched_pay_due_date + 1 ) > db.next_sched_pay_due_date AND i.id = db.ind_id AND tra.dsba_id (+) = db.id AND tra.std_rl_id (+) = db.ppay_std_rl_id AND dd.dsba_id = db.id AND nvl(     dd.disb_order_seqnbr, 0 ) = 0 AND dd.status_code IN ( 'PENDING', 'CASHRECD' ) AND dd.notify_date <= to_date(     sysdate, 'DD-MON-YYYY' ) ORDER BY db.gc_id ASC, i.ssn ASC, db.id ASC;</p> </ul> </li> </ul> </li> </ul>"
  },
  "ptdv": {
    "title": "PTDV",
    "header": "PTDV Troubleshooting Steps",
    "body": "<ul> <li> <strong>Whether the job is re-startable?</strong> <p>Yes, requires investigation before restart.</p> </li> <li> <strong>All steps required to troubleshoot the job, in case of failure:</strong> <ul><p>1. Job failure</p> <p>2. Prodsupp will send email</p><p>3. Developer will analyze into the logs created in $ISIS_HOME/tmp/db/PTDV*.  Developer can also run the above driver query in production database to check if there are duplicate rows.</p><p>4. Prodsupp will schedule bridge if required.</p><p>5. Developer will suggest the resolution.</p><p>6. Prodsupp will implement the solution.</p><li>When there is any On-Demand request to Re-run or Restart PTDV job, then we should force start through service request. Before force restarting the job, make sure compltn_date must be added to the DIVD DECL step in STEP table, but PASSTHRU step needs to remain open for PTDV to pick up the event.</li> <li>Impacted accounts: <p>select inl.div_passthru_pymt_option_code, count(*) as cnt from( SELECT DISTINCT     db.ev_id,     SUM(dt.req_amt) AS wd_amt,     pa.div_passthru_pymt_option_code FROM     disb_basic   db,     disb_detl    dt,     part_service pa WHERE     db.id = dt.dsba_id     AND db.ind_id = pa.ind_id and db.ev_id in(select id from event where master_ev_id in(select id from event where master_Ev_id=<ADIV_EV_ID>) ) and db.status_code ='COMPLETE’ and pa.ga_id = ‘<ga_id>’ and pa.sdsv_code = 'DIVD PASS THROUGH’ and pa.status_code = 'A’ and pa.ind_id in (select ind_id from inv_acct where status_code = 'A’ and sdio_id = ‘<sdio_id>’ and ga_id = ‘<ga_id>’) GROUP BY     ev_id,     pa.div_passthru_pymt_option_code )inl group by inl.div_passthru_pymt_option_code;</p>  </ul> </li></ul> </li> </ul>"
  },
  "stpl": {
    "title": "STPL",
    "header": "STPL Troubleshooting Steps",
    "body": "<ul> <li> <strong>Whether the job is re-startable?</strong> <p>Yes, requires investigation before restart.</p> </li> <li> <strong>All steps required to troubleshoot the job, in case of failure:</strong> <ul> <li>Check Stub file sends details to ‘SAP’ team related to ‘Check’. For Instance, How is the check being sent and how does it get delivered to the end user. These details are sent to process the payments.</li> <li>There are three types of Checks:</li> <p>1. IS – Same day check, It is sent by Fedex and gets delivered on the same day.</p><p>2. IC- Clean check, It takes upto 7days to reach the end user.</p><p>3. ID- Dirty check, It takes upto 14days to reach the end user</p> <li>Query to find out the type of the check<ul> <p>select * from check_print_destination</p> <li>Parameters are checked to verify they are passed in.</li> <p>-Parameter list consists of 3 parameters:</p> <p>1. Datestamp</p> <p>2. Execution mode: C-create file or R-recreate file. Cycle for mode R (recreate mode) or any number for C (create mode)</p><p>3. Runtime for runtime mode is ALL (all prenotes) for night run</p><p>4. Runtime for runtime mode is SAME for SAMEDAY/SAMEDAY_PUSH</p><li>Troubleshooting Steps: Navigate to the logs and look for the error messages in the file. Act based on the error received.</li> <p>If it is ‘Mode specification failure’ or ‘Wrong runtime specification’, check the env file to verify that the parameters are entered as expected, if not, correct env file. <p>For other errors, analyze the error from log file and check the respective function/query data in the code (refer to flow diagram for quick understanding of code flow) and take actions accordingly.</p><p>For other errors, refer to flow diagram for quick understanding of code flow and figure out the issue and take necessary actions. </p><p>The commit happens at the very end of the program and hence any failure happens, it causes rollback of all the DML operations involved. So, updates to reset any value is not needed in general before restarting the batch but still make sure to check if cycle count has been updated or if any output file has generated from the previous run.</p> </ul> </li> <li>Note: There are no known issues for this job till date. <ul> <li>·To resend a file:<p>In order to resend the file, you must remove the “date” and the “.done” extension.</p></li> <li>Unix command:</li><p> Mv GUXX_STUB_04209.txt.20191008.done GUXX_STUB_04209.txt </p> </ul> </li> <li>Impact query: <ul> <p>SELECT id, aprec_id, ev_id, step_seqnbr, amount, status_code, auth_ind, acty_code, special_handling_code FROM ap_acty WHERE acty_code = 'CHK' AND aprec_id IN (     SELECT         id     FROM         ap_rec     WHERE         ga_id IN ( '340001-01', '340300-01', '98945-01')         AND trunc(dpdate) >= '01-JUL-2020' );</p> <ul> <li>SELECT COUNT(*) FROM ap_acty aa WHERE sap_master_data_pull_code IS NOT NULL AND sap_master_data_pull_ev_id IS NULL;</li> </ul>  <li>Queries to re run STPL:</li><p>UPDATE ap_acty SET     status_code = 'NPRO' WHERE     acty_code = 'CHK'     AND aprec_id IN (         SELECT             id         FROM             ap_rec         WHERE             ga_id IN ( '340001-01', '340300-01', '98945-01' )             AND trunc(dpdate) >= '01-Jul-2020'     )</p> <li>Reset data in work_ap_check table set cycle_nbr=null through a DBC</li><p>UPDATE work_ap_check SET     cycle_nbr = NULL WHERE     apacty_id IN (         SELECT            id         FROM             ap_acty         WHERE             acty_code = 'CHK'             AND aprec_id IN (                 SELECT                     id                 FROM                     ap_rec                 WHERE                     ga_id IN ( '340001-01', '340300-01', '98945-01' )                     AND trunc(dpdate) >= '01-jul-2020'             )             AND cycle_nbr = &cycle_nbr     );</p> </ul> </li> </ul> </li> </ul>"
  },
  "tabd": {
    "title": "TABD",
    "header": "TABD Troubleshooting Steps",
    "body": "<ul> <li> <strong>Whether the job is re-startable?</strong> <p>Yes, requires investigation before restart.</p> </li> <li> <strong>All steps required to troubleshoot the job, in case of failure:</strong> <ul> <li>Get the cycle number from below query:</li> <p>SELECT next_cycle_nbr FROM acctg_frs_cycle WHERE module_name like '%BPPL';</p> <li>If it was already incremented in prior run, then cycle_nbr must be decremented before restart because it must match with SAP data.</li> <li>Delete file from $ISIS_HOME/data/ap directory then restart the job from the top.</li> <li>If a prior BPPL Cycle needs to be recreated because of any reason: <ul> <li>Rename the existing file by adding extension \".bad\" to it.</li> <li>Identify the master pull event id of the cycle to be recreated from the above previous query. It can be done by searching the event table. The Narrative field contains this text - \"SAP BP Pull Cycle= ???\" where the ??? identifies the cycle number. Below is the query example:</li> <p>SELECT id FROM event WHERE narrative = 'sap BP Pull cycle = xxx';</p> <p>xxx refers to cycle number obtained from prior query.</p> <li>This event which was created during normal run will also be used to update the ap_acty table. Use the above master event id to query ap_acty table to get how many records will be reprocessed.</li> <p>SELECT * FROM ap_acty WHERE sap_master_data_pull_ev_id = xxx; xxx – refers to event pulled from previous query.</p> </ul> </li> <li>Edit the Autosys environment file for the BPPL job and change the BPPL_MODE variable to be \"R\" and the BPPL_EV_ID to be the value identified from the event table. <ul> <li>After the BPPL file is recreated, be sure to reset the BPPL_MODE and BPPL_EV_ID back to their original values of \"C\" and 0.</li> <li>Once this is done, the job can be restarted from the top (remove the current file from $SIS_HOME/data/ap and restart the box from the top).</li> <li>Include queries for each step, wherever applicable</li> </ul> </li> <li>Below pre and post queries can be used for general monitoring of the batch to see the count reducing for pre query when the batch processes the records and count of post query increasing for the processed records simultaneously. <ul> <li>Pre query: <ul> <li>SELECT COUNT(*) FROM ap_acty aa WHERE sap_master_data_pull_code IS NOT NULL AND sap_master_data_pull_ev_id IS NULL;</li> </ul> </li> <li>Post Query:</li> <li>Debug file is required to get details about where the job has failed. To get the debug, we need to create an SR for production support team with required debug variables set.</li> </ul> </li> </ul> </li> </ul>"
  },
  "term": {
    "title": "TERM",
    "header": "TERM Troubleshooting Steps",
    "body": "<ul> <li> <strong>Whether the job is re-startable?</strong> <p>Yes, requires investigation before restart.</p> </li> <li> <strong>All steps required to troubleshoot the job, in case of failure:</strong> <ul><p>- Include queries for each step, wherever applicable</p> <p> Restart is OK if no other Control Jobs (GQXXTERM) are running.</p><p>Remove the lock file before restart (/opt/401k/data/db/TERM<Stream_number>.lck)</p><p>Restart from the critical queue.</p><li>Pre-query: This query is used to get the list of the Master events that are scheduled to be processed on the given date. The production support person can use this query to get the count of the events that are scheduled to get processed for the given date. A temporary table, work_term_pre_qry is created as a part of this which looks for the master events with status_code= ‘MASTERMC’.</li> <li><p>DROP TABLE work_term_pre_qry;</p><p>CREATE work_term_pre_qry as SELECT distinct ev.id    FROM disb_basic db, event ev WHERE ev.evty_code in ('MASSTERM', 'MASSDEMIN','MASSTERMRA')    AND ev.cncl_date is null AND db.ev_id = ev.id    AND db.status_code = 'MASTERMC'    AND db.auth_ind = 'Y'    AND db.next_sched_pay_due_date to be <= trunc(sysdate) AND nvl(db.termdate, sysdate + 1) > sysdate;</p> <p>GRANT ALL ON work_term_pre_qry TO PUBLIC;</p> <p>SELECT COUNT(*) FROM work_term_pre_qry;</p> <li>Post query: Once the job runs successfully, the Master event Id’s Status codes move from ‘MASTERMC’ to ‘MASTERCM’ indicating the completion of the process. The following query gives the count of such events.</li> <p>SELECT COUNT(*) FROM disb_basic WHERE status_code = 'MASTERCM' AND ev_id IN (     SELECT         id     FROM         work_term_pre_qry );</p> </ul> </li> <li>Disclaimer: This following process is extensively used and can be opted when we would want to research a Job failure/Issue. Process to run TERM job from command line: <ul> <li>As part of refactoring development, we have removed hard-coded EVTY_CODES and calling them from an env variable file. So before running the job from command line that env variable needs to be set. Please follow the following steps to run term and term_no_wait process:</li> <li>Step 1: Initialize variables in Unix</li><p>setenv TERM_COMMIT FALSE</p><p>setenv TERM_DEBUG_LEVEL TRUE</p><p>setenv TERM_MAIL_LIST <user_id> to receive completed events details</p><p>setenv TERM_EVTY_CODE MASSTERM,MASSDEMIN,MASSTERMRA</p><p>setenv TERM_FILEDISBSV_EVTY_CODE FILEDISBSV (only for normal term process that runs as part of nightly batch otherwise set the following variable)</p> <li>Step 2: Run term shell script from command line</li><p>$ISIS_HOME/bin/GQ19TERM.sh ALL/Master_ev_id</p> </ul> </li> <li>- SELECT query to find out the count of impacted accounts <ul> <li><p>SELECT em.evty_code, COUNT(DISTINCT em.id) AS master_ev_id_cnt FROM disb_basic db, event      em WHERE em.evty_code IN ('MASSTERM', 'MASSDEMIN', 'MASSTERMRA') AND em.cncl_date IS NULL AND db.ev_id = em.id AND db.status_code = 'MASTERMC' AND db.auth_ind = 'Y' AND nvl (     db.termdate, sysdate + 1 ) > sysdate GROUP BY em.evty_code;</p> <ul> <li>Query to find all disb count under the master event: </li> <p>SELECT em.evty_code, COUNT(DISTINCT ec.id) AS child_disb_evnt_cnt FROM disb_basic db, event      em, event      ec WHERE em.evty_code IN ('MASSTERM', 'MASSDEMIN', 'MASSTERMRA' ) AND em.cncl_date IS NULL AND db.ev_id = em.id AND ec.master_ev_id = db.ev_id AND db.status_code = 'MASTERMC' AND db.auth_ind = 'Y' AND nvl(     db.termdate, sysdate + 1 ) > sysdate GROUP BY em.evty_code;</p></ul> </li></ul> </li> </ul> </li> </ul>"
  },
  "bprv": {
    "title": "BPRV",
    "header": "BPRV Troubleshooting Steps",
    "body": "<ul> <li> <strong>Whether the job is re-startable?</strong> <p>Yes, requires investigation before restart.</p> </li> <li> <strong>All steps required to troubleshoot the job, in case of failure:</strong> <ul> <li>Get the cycle number from below query:</li> <p>SELECT next_cycle_nbr FROM acctg_frs_cycle WHERE module_name like '%BPPL';</p> <li>If it was already incremented in prior run, then cycle_nbr must be decremented before restart because it must match with SAP data.</li> <li>Delete file from $ISIS_HOME/data/ap directory then restart the job from the top.</li> <li>If a prior BPPL Cycle needs to be recreated because of any reason: <ul> <li>Rename the existing file by adding extension \".bad\" to it.</li> <li>Identify the master pull event id of the cycle to be recreated from the above previous query. It can be done by searching the event table. The Narrative field contains this text - \"SAP BP Pull Cycle= ???\" where the ??? identifies the cycle number. Below is the query example:</li> <p>SELECT id FROM event WHERE narrative = 'sap BP Pull cycle = xxx';</p> <p>xxx refers to cycle number obtained from prior query.</p> <li>This event which was created during normal run will also be used to update the ap_acty table. Use the above master event id to query ap_acty table to get how many records will be reprocessed.</li> <p>SELECT * FROM ap_acty WHERE sap_master_data_pull_ev_id = xxx; xxx – refers to event pulled from previous query.</p> </ul> </li> <li>Edit the Autosys environment file for the BPPL job and change the BPPL_MODE variable to be \"R\" and the BPPL_EV_ID to be the value identified from the event table. <ul> <li>After the BPPL file is recreated, be sure to reset the BPPL_MODE and BPPL_EV_ID back to their original values of \"C\" and 0.</li> <li>Once this is done, the job can be restarted from the top (remove the current file from $SIS_HOME/data/ap and restart the box from the top).</li> <li>Include queries for each step, wherever applicable</li> </ul> </li> <li>Below pre and post queries can be used for general monitoring of the batch to see the count reducing for pre query when the batch processes the records and count of post query increasing for the processed records simultaneously. <ul> <li>Pre query: <ul> <li>SELECT COUNT(*) FROM ap_acty aa WHERE sap_master_data_pull_code IS NOT NULL AND sap_master_data_pull_ev_id IS NULL;</li> </ul> </li> <li>Post Query:</li> <li>Debug file is required to get details about where the job has failed. To get the debug, we need to create an SR for production support team with required debug variables set.</li> </ul> </li> </ul> </li> </ul>"
  },
  "mdrv": {
    "title": "MDRV",
    "header": "MDRV Troubleshooting Steps",
    "body": "<ul> <li> <strong>Whether the job is re-startable?</strong> <p>Yes, requires investigation before restart.</p> </li> <li> <strong>All steps required to troubleshoot the job, in case of failure:</strong> <ul> <li>Get the cycle number from below query:</li> <p>SELECT next_cycle_nbr FROM acctg_frs_cycle WHERE module_name like '%BPPL';</p> <li>If it was already incremented in prior run, then cycle_nbr must be decremented before restart because it must match with SAP data.</li> <li>Delete file from $ISIS_HOME/data/ap directory then restart the job from the top.</li> <li>If a prior BPPL Cycle needs to be recreated because of any reason: <ul> <li>Rename the existing file by adding extension \".bad\" to it.</li> <li>Identify the master pull event id of the cycle to be recreated from the above previous query. It can be done by searching the event table. The Narrative field contains this text - \"SAP BP Pull Cycle= ???\" where the ??? identifies the cycle number. Below is the query example:</li> <p>SELECT id FROM event WHERE narrative = 'sap BP Pull cycle = xxx';</p> <p>xxx refers to cycle number obtained from prior query.</p> <li>This event which was created during normal run will also be used to update the ap_acty table. Use the above master event id to query ap_acty table to get how many records will be reprocessed.</li> <p>SELECT * FROM ap_acty WHERE sap_master_data_pull_ev_id = xxx; xxx – refers to event pulled from previous query.</p> </ul> </li> <li>Edit the Autosys environment file for the BPPL job and change the BPPL_MODE variable to be \"R\" and the BPPL_EV_ID to be the value identified from the event table. <ul> <li>After the BPPL file is recreated, be sure to reset the BPPL_MODE and BPPL_EV_ID back to their original values of \"C\" and 0.</li> <li>Once this is done, the job can be restarted from the top (remove the current file from $SIS_HOME/data/ap and restart the box from the top).</li> <li>Include queries for each step, wherever applicable</li> </ul> </li> <li>Below pre and post queries can be used for general monitoring of the batch to see the count reducing for pre query when the batch processes the records and count of post query increasing for the processed records simultaneously. <ul> <li>Pre query: <ul> <li>SELECT COUNT(*) FROM ap_acty aa WHERE sap_master_data_pull_code IS NOT NULL AND sap_master_data_pull_ev_id IS NULL;</li> </ul> </li> <li>Post Query:</li> <li>Debug file is required to get details about where the job has failed. To get the debug, we need to create an SR for production support team with required debug variables set.</li> </ul> </li> </ul> </li> </ul>"
  },
  "pata": {
    "title": "PATA",
    "header": "PATA Troubleshooting Steps",
    "body": "<ul> <li> <strong>Whether the job is re-startable?</strong> <p>Yes, requires investigation before restart.</p> </li> <li> <strong>All steps required to troubleshoot the job, in case of failure:</strong> <ul> <li>Get the cycle number from below query:</li> <p>SELECT next_cycle_nbr FROM acctg_frs_cycle WHERE module_name like '%BPPL';</p> <li>If it was already incremented in prior run, then cycle_nbr must be decremented before restart because it must match with SAP data.</li> <li>Delete file from $ISIS_HOME/data/ap directory then restart the job from the top.</li> <li>If a prior BPPL Cycle needs to be recreated because of any reason: <ul> <li>Rename the existing file by adding extension \".bad\" to it.</li> <li>Identify the master pull event id of the cycle to be recreated from the above previous query. It can be done by searching the event table. The Narrative field contains this text - \"SAP BP Pull Cycle= ???\" where the ??? identifies the cycle number. Below is the query example:</li> <p>SELECT id FROM event WHERE narrative = 'sap BP Pull cycle = xxx';</p> <p>xxx refers to cycle number obtained from prior query.</p> <li>This event which was created during normal run will also be used to update the ap_acty table. Use the above master event id to query ap_acty table to get how many records will be reprocessed.</li> <p>SELECT * FROM ap_acty WHERE sap_master_data_pull_ev_id = xxx; xxx – refers to event pulled from previous query.</p> </ul> </li> <li>Edit the Autosys environment file for the BPPL job and change the BPPL_MODE variable to be \"R\" and the BPPL_EV_ID to be the value identified from the event table. <ul> <li>After the BPPL file is recreated, be sure to reset the BPPL_MODE and BPPL_EV_ID back to their original values of \"C\" and 0.</li> <li>Once this is done, the job can be restarted from the top (remove the current file from $SIS_HOME/data/ap and restart the box from the top).</li> <li>Include queries for each step, wherever applicable</li> </ul> </li> <li>Below pre and post queries can be used for general monitoring of the batch to see the count reducing for pre query when the batch processes the records and count of post query increasing for the processed records simultaneously. <ul> <li>Pre query: <ul> <li>SELECT COUNT(*) FROM ap_acty aa WHERE sap_master_data_pull_code IS NOT NULL AND sap_master_data_pull_ev_id IS NULL;</li> </ul> </li> <li>Post Query:</li> <li>Debug file is required to get details about where the job has failed. To get the debug, we need to create an SR for production support team with required debug variables set.</li> </ul> </li> </ul> </li> </ul>"
  },
  "payt": {
    "title": "PAYT",
    "header": "PAYT Troubleshooting Steps",
    "body": "<ul> <li> <strong>Whether the job is re-startable?</strong> <p>Yes, requires investigation before restart.</p> </li> <li> <strong>All steps required to troubleshoot the job, in case of failure:</strong> <ul> <li>Get the cycle number from below query:</li> <p>SELECT next_cycle_nbr FROM acctg_frs_cycle WHERE module_name like '%BPPL';</p> <li>If it was already incremented in prior run, then cycle_nbr must be decremented before restart because it must match with SAP data.</li> <li>Delete file from $ISIS_HOME/data/ap directory then restart the job from the top.</li> <li>If a prior BPPL Cycle needs to be recreated because of any reason: <ul> <li>Rename the existing file by adding extension \".bad\" to it.</li> <li>Identify the master pull event id of the cycle to be recreated from the above previous query. It can be done by searching the event table. The Narrative field contains this text - \"SAP BP Pull Cycle= ???\" where the ??? identifies the cycle number. Below is the query example:</li> <p>SELECT id FROM event WHERE narrative = 'sap BP Pull cycle = xxx';</p> <p>xxx refers to cycle number obtained from prior query.</p> <li>This event which was created during normal run will also be used to update the ap_acty table. Use the above master event id to query ap_acty table to get how many records will be reprocessed.</li> <p>SELECT * FROM ap_acty WHERE sap_master_data_pull_ev_id = xxx; xxx – refers to event pulled from previous query.</p> </ul> </li> <li>Edit the Autosys environment file for the BPPL job and change the BPPL_MODE variable to be \"R\" and the BPPL_EV_ID to be the value identified from the event table. <ul> <li>After the BPPL file is recreated, be sure to reset the BPPL_MODE and BPPL_EV_ID back to their original values of \"C\" and 0.</li> <li>Once this is done, the job can be restarted from the top (remove the current file from $SIS_HOME/data/ap and restart the box from the top).</li> <li>Include queries for each step, wherever applicable</li> </ul> </li> <li>Below pre and post queries can be used for general monitoring of the batch to see the count reducing for pre query when the batch processes the records and count of post query increasing for the processed records simultaneously. <ul> <li>Pre query: <ul> <li>SELECT COUNT(*) FROM ap_acty aa WHERE sap_master_data_pull_code IS NOT NULL AND sap_master_data_pull_ev_id IS NULL;</li> </ul> </li> <li>Post Query:</li> <li>Debug file is required to get details about where the job has failed. To get the debug, we need to create an SR for production support team with required debug variables set.</li> </ul> </li> </ul> </li> </ul>"
  },
  "petx": {
    "title": "PETX",
    "header": "PETX Troubleshooting Steps",
    "body": "<ul> <li> <strong>Whether the job is re-startable?</strong> <p>Yes, requires investigation before restart.</p> </li> <li> <strong>All steps required to troubleshoot the job, in case of failure:</strong> <ul> <li>Get the cycle number from below query:</li> <p>SELECT next_cycle_nbr FROM acctg_frs_cycle WHERE module_name like '%BPPL';</p> <li>If it was already incremented in prior run, then cycle_nbr must be decremented before restart because it must match with SAP data.</li> <li>Delete file from $ISIS_HOME/data/ap directory then restart the job from the top.</li> <li>If a prior BPPL Cycle needs to be recreated because of any reason: <ul> <li>Rename the existing file by adding extension \".bad\" to it.</li> <li>Identify the master pull event id of the cycle to be recreated from the above previous query. It can be done by searching the event table. The Narrative field contains this text - \"SAP BP Pull Cycle= ???\" where the ??? identifies the cycle number. Below is the query example:</li> <p>SELECT id FROM event WHERE narrative = 'sap BP Pull cycle = xxx';</p> <p>xxx refers to cycle number obtained from prior query.</p> <li>This event which was created during normal run will also be used to update the ap_acty table. Use the above master event id to query ap_acty table to get how many records will be reprocessed.</li> <p>SELECT * FROM ap_acty WHERE sap_master_data_pull_ev_id = xxx; xxx – refers to event pulled from previous query.</p> </ul> </li> <li>Edit the Autosys environment file for the BPPL job and change the BPPL_MODE variable to be \"R\" and the BPPL_EV_ID to be the value identified from the event table. <ul> <li>After the BPPL file is recreated, be sure to reset the BPPL_MODE and BPPL_EV_ID back to their original values of \"C\" and 0.</li> <li>Once this is done, the job can be restarted from the top (remove the current file from $SIS_HOME/data/ap and restart the box from the top).</li> <li>Include queries for each step, wherever applicable</li> </ul> </li> <li>Below pre and post queries can be used for general monitoring of the batch to see the count reducing for pre query when the batch processes the records and count of post query increasing for the processed records simultaneously. <ul> <li>Pre query: <ul> <li>SELECT COUNT(*) FROM ap_acty aa WHERE sap_master_data_pull_code IS NOT NULL AND sap_master_data_pull_ev_id IS NULL;</li> </ul> </li> <li>Post Query:</li> <li>Debug file is required to get details about where the job has failed. To get the debug, we need to create an SR for production support team with required debug variables set.</li> </ul> </li> </ul> </li> </ul>"
  },
  "plio": {
    "title": "PLIO",
    "header": "PLIO Troubleshooting Steps",
    "body": "<ul> <li> <strong>Whether the job is re-startable?</strong> <p>Yes, requires investigation before restart.</p> </li> <li> <strong>All steps required to troubleshoot the job, in case of failure:</strong> <ul> <li>Get the cycle number from below query:</li> <p>SELECT next_cycle_nbr FROM acctg_frs_cycle WHERE module_name like '%BPPL';</p> <li>If it was already incremented in prior run, then cycle_nbr must be decremented before restart because it must match with SAP data.</li> <li>Delete file from $ISIS_HOME/data/ap directory then restart the job from the top.</li> <li>If a prior BPPL Cycle needs to be recreated because of any reason: <ul> <li>Rename the existing file by adding extension \".bad\" to it.</li> <li>Identify the master pull event id of the cycle to be recreated from the above previous query. It can be done by searching the event table. The Narrative field contains this text - \"SAP BP Pull Cycle= ???\" where the ??? identifies the cycle number. Below is the query example:</li> <p>SELECT id FROM event WHERE narrative = 'sap BP Pull cycle = xxx';</p> <p>xxx refers to cycle number obtained from prior query.</p> <li>This event which was created during normal run will also be used to update the ap_acty table. Use the above master event id to query ap_acty table to get how many records will be reprocessed.</li> <p>SELECT * FROM ap_acty WHERE sap_master_data_pull_ev_id = xxx; xxx – refers to event pulled from previous query.</p> </ul> </li> <li>Edit the Autosys environment file for the BPPL job and change the BPPL_MODE variable to be \"R\" and the BPPL_EV_ID to be the value identified from the event table. <ul> <li>After the BPPL file is recreated, be sure to reset the BPPL_MODE and BPPL_EV_ID back to their original values of \"C\" and 0.</li> <li>Once this is done, the job can be restarted from the top (remove the current file from $SIS_HOME/data/ap and restart the box from the top).</li> <li>Include queries for each step, wherever applicable</li> </ul> </li> <li>Below pre and post queries can be used for general monitoring of the batch to see the count reducing for pre query when the batch processes the records and count of post query increasing for the processed records simultaneously. <ul> <li>Pre query: <ul> <li>SELECT COUNT(*) FROM ap_acty aa WHERE sap_master_data_pull_code IS NOT NULL AND sap_master_data_pull_ev_id IS NULL;</li> </ul> </li> <li>Post Query:</li> <li>Debug file is required to get details about where the job has failed. To get the debug, we need to create an SR for production support team with required debug variables set.</li> </ul> </li> </ul> </li> </ul>"
  },
  "plip": {
    "title": "PLIP",
    "header": "PLIP Troubleshooting Steps",
    "body": "<ul> <li> <strong>Whether the job is re-startable?</strong> <p>Yes, requires investigation before restart.</p> </li> <li> <strong>All steps required to troubleshoot the job, in case of failure:</strong> <ul> <li>Get the cycle number from below query:</li> <p>SELECT next_cycle_nbr FROM acctg_frs_cycle WHERE module_name like '%BPPL';</p> <li>If it was already incremented in prior run, then cycle_nbr must be decremented before restart because it must match with SAP data.</li> <li>Delete file from $ISIS_HOME/data/ap directory then restart the job from the top.</li> <li>If a prior BPPL Cycle needs to be recreated because of any reason: <ul> <li>Rename the existing file by adding extension \".bad\" to it.</li> <li>Identify the master pull event id of the cycle to be recreated from the above previous query. It can be done by searching the event table. The Narrative field contains this text - \"SAP BP Pull Cycle= ???\" where the ??? identifies the cycle number. Below is the query example:</li> <p>SELECT id FROM event WHERE narrative = 'sap BP Pull cycle = xxx';</p> <p>xxx refers to cycle number obtained from prior query.</p> <li>This event which was created during normal run will also be used to update the ap_acty table. Use the above master event id to query ap_acty table to get how many records will be reprocessed.</li> <p>SELECT * FROM ap_acty WHERE sap_master_data_pull_ev_id = xxx; xxx – refers to event pulled from previous query.</p> </ul> </li> <li>Edit the Autosys environment file for the BPPL job and change the BPPL_MODE variable to be \"R\" and the BPPL_EV_ID to be the value identified from the event table. <ul> <li>After the BPPL file is recreated, be sure to reset the BPPL_MODE and BPPL_EV_ID back to their original values of \"C\" and 0.</li> <li>Once this is done, the job can be restarted from the top (remove the current file from $SIS_HOME/data/ap and restart the box from the top).</li> <li>Include queries for each step, wherever applicable</li> </ul> </li> <li>Below pre and post queries can be used for general monitoring of the batch to see the count reducing for pre query when the batch processes the records and count of post query increasing for the processed records simultaneously. <ul> <li>Pre query: <ul> <li>SELECT COUNT(*) FROM ap_acty aa WHERE sap_master_data_pull_code IS NOT NULL AND sap_master_data_pull_ev_id IS NULL;</li> </ul> </li> <li>Post Query:</li> <li>Debug file is required to get details about where the job has failed. To get the debug, we need to create an SR for production support team with required debug variables set.</li> </ul> </li> </ul> </li> </ul>"
  },
  "trfb1": {
    "title": "TRFB1",
    "header": "TRFB1 Troubleshooting Steps",
    "body": "<ul> <li> <strong>Whether the job is re-startable?</strong> <p>Yes, requires investigation before restart.</p> </li> <li> <strong>All steps required to troubleshoot the job, in case of failure:</strong> <ul> <li>Get the cycle number from below query:</li> <p>SELECT next_cycle_nbr FROM acctg_frs_cycle WHERE module_name like '%BPPL';</p> <li>If it was already incremented in prior run, then cycle_nbr must be decremented before restart because it must match with SAP data.</li> <li>Delete file from $ISIS_HOME/data/ap directory then restart the job from the top.</li> <li>If a prior BPPL Cycle needs to be recreated because of any reason: <ul> <li>Rename the existing file by adding extension \".bad\" to it.</li> <li>Identify the master pull event id of the cycle to be recreated from the above previous query. It can be done by searching the event table. The Narrative field contains this text - \"SAP BP Pull Cycle= ???\" where the ??? identifies the cycle number. Below is the query example:</li> <p>SELECT id FROM event WHERE narrative = 'sap BP Pull cycle = xxx';</p> <p>xxx refers to cycle number obtained from prior query.</p> <li>This event which was created during normal run will also be used to update the ap_acty table. Use the above master event id to query ap_acty table to get how many records will be reprocessed.</li> <p>SELECT * FROM ap_acty WHERE sap_master_data_pull_ev_id = xxx; xxx – refers to event pulled from previous query.</p> </ul> </li> <li>Edit the Autosys environment file for the BPPL job and change the BPPL_MODE variable to be \"R\" and the BPPL_EV_ID to be the value identified from the event table. <ul> <li>After the BPPL file is recreated, be sure to reset the BPPL_MODE and BPPL_EV_ID back to their original values of \"C\" and 0.</li> <li>Once this is done, the job can be restarted from the top (remove the current file from $SIS_HOME/data/ap and restart the box from the top).</li> <li>Include queries for each step, wherever applicable</li> </ul> </li> <li>Below pre and post queries can be used for general monitoring of the batch to see the count reducing for pre query when the batch processes the records and count of post query increasing for the processed records simultaneously. <ul> <li>Pre query: <ul> <li>SELECT COUNT(*) FROM ap_acty aa WHERE sap_master_data_pull_code IS NOT NULL AND sap_master_data_pull_ev_id IS NULL;</li> </ul> </li> <li>Post Query:</li> <li>Debug file is required to get details about where the job has failed. To get the debug, we need to create an SR for production support team with required debug variables set.</li> </ul> </li> </ul> </li> </ul>"
  },
  "upsu": {
    "title": "UPSU",
    "header": "UPSU Troubleshooting Steps",
    "body": "<ul> <li> <strong>Whether the job is re-startable?</strong> <p>Yes, requires investigation before restart.</p> </li> <li> <strong>All steps required to troubleshoot the job, in case of failure:</strong> <ul> <li>Get the cycle number from below query:</li> <p>SELECT next_cycle_nbr FROM acctg_frs_cycle WHERE module_name like '%BPPL';</p> <li>If it was already incremented in prior run, then cycle_nbr must be decremented before restart because it must match with SAP data.</li> <li>Delete file from $ISIS_HOME/data/ap directory then restart the job from the top.</li> <li>If a prior BPPL Cycle needs to be recreated because of any reason: <ul> <li>Rename the existing file by adding extension \".bad\" to it.</li> <li>Identify the master pull event id of the cycle to be recreated from the above previous query. It can be done by searching the event table. The Narrative field contains this text - \"SAP BP Pull Cycle= ???\" where the ??? identifies the cycle number. Below is the query example:</li> <p>SELECT id FROM event WHERE narrative = 'sap BP Pull cycle = xxx';</p> <p>xxx refers to cycle number obtained from prior query.</p> <li>This event which was created during normal run will also be used to update the ap_acty table. Use the above master event id to query ap_acty table to get how many records will be reprocessed.</li> <p>SELECT * FROM ap_acty WHERE sap_master_data_pull_ev_id = xxx; xxx – refers to event pulled from previous query.</p> </ul> </li> <li>Edit the Autosys environment file for the BPPL job and change the BPPL_MODE variable to be \"R\" and the BPPL_EV_ID to be the value identified from the event table. <ul> <li>After the BPPL file is recreated, be sure to reset the BPPL_MODE and BPPL_EV_ID back to their original values of \"C\" and 0.</li> <li>Once this is done, the job can be restarted from the top (remove the current file from $SIS_HOME/data/ap and restart the box from the top).</li> <li>Include queries for each step, wherever applicable</li> </ul> </li> <li>Below pre and post queries can be used for general monitoring of the batch to see the count reducing for pre query when the batch processes the records and count of post query increasing for the processed records simultaneously. <ul> <li>Pre query: <ul> <li>SELECT COUNT(*) FROM ap_acty aa WHERE sap_master_data_pull_code IS NOT NULL AND sap_master_data_pull_ev_id IS NULL;</li> </ul> </li> <li>Post Query:</li> <li>Debug file is required to get details about where the job has failed. To get the debug, we need to create an SR for production support team with required debug variables set.</li> </ul> </li> </ul> </li> </ul>"
  }
}
