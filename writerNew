when(dao.getPpayFrequency(anyString(), anyString(), anyString(), anyString())).thenReturn("Frequency");
        when(dao.getPpayAmount(anyString(), anyString(), anyString(), anyString())).thenReturn("Amount");
        when(dao.getriderCode(anyString(), anyString(), anyString(), anyString(), anyString())).thenReturn("RiderCode");
        when(rds.getDataSource(anyString())).thenReturn(null);

        // Execute the method
        itemWriter.write(items);

        // Verify interactions
        verify(dao, times(1)).setJdbcTemplate(null);
        verify(dao, times(2)).getPpayFrequency(anyString(), anyString(), anyString(), anyString());
        verify(dao, times(2)).getPpayAmount(anyString(), anyString(), anyString(), anyString());
        verify(dao, times(2)).getriderCode(anyString(), anyString(), anyString(), anyString(), anyString());



----------------------------------------------------------------------------------------------------------------

  verify(dao).setJdbcTemplate(any());
        verify(dao).getPpayFrequency(db, "gaId", "indId", "INCOMEFLEX-SELECT");
        verify(dao).getPpayAmount(db, "gaId", "indId", "INCOMEFLEX-SELECT");
        verify(dao).getriderCode(db, "gaId", "indId", "INCOMEFLEX-SELECT", "sdioId");
        verify(dao).getPpayFrequency(db, "gaId", "indId", "INCOMEFLEX-TARGET");
        verify(dao).getPpayAmount(db, "gaId", "indId", "INCOMEFLEX-TARGET");
        verify(dao).getriderCode(db, "gaId", "indId", "INCOMEFLEX-TARGET", null);
        verify(rds).getDataSource(db);

