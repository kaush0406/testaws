when(dao.getPpayFrequency(anyString(), anyString(), anyString(), anyString())).thenReturn("Frequency");
        when(dao.getPpayAmount(anyString(), anyString(), anyString(), anyString())).thenReturn("Amount");
        when(dao.getriderCode(anyString(), anyString(), anyString(), anyString(), anyString())).thenReturn("RiderCode");
        when(rds.getDataSource(anyString())).thenReturn(null);

        // Execute the method
        itemWriter.write(items);

        // Verify interactions
        verify(dao, times(1)).setJdbcTemplate(null);
        verify(dao, times(2)).getPpayFrequency(anyString(), anyString(), anyString(), anyString());
        verify(dao, times(2)).getPpayAmount(anyString(), anyString(), anyString(), anyString());
        verify(dao, times(2)).getriderCode(anyString(), anyString(), anyString(), anyString(), anyString());



----------------------------------------------------------------------------------------------------------------

  verify(dao).setJdbcTemplate(any());
        verify(dao).getPpayFrequency(db, "gaId", "indId", "INCOMEFLEX-SELECT");
        verify(dao).getPpayAmount(db, "gaId", "indId", "INCOMEFLEX-SELECT");
        verify(dao).getriderCode(db, "gaId", "indId", "INCOMEFLEX-SELECT", "sdioId");
        verify(dao).getPpayFrequency(db, "gaId", "indId", "INCOMEFLEX-TARGET");
        verify(dao).getPpayAmount(db, "gaId", "indId", "INCOMEFLEX-TARGET");
        verify(dao).getriderCode(db, "gaId", "indId", "INCOMEFLEX-TARGET", null);
        verify(rds).getDataSource(db);


-------------------------------------------------------------------------------------------

@Test
	public void testAccumSelect() {
		// Prepare test data
		ParticipantDetailsDto pptDetail = new ParticipantDetailsDto();
		pptDetail.setBalance(1000.0);
		PostLockInDetailsDto postLockIn = new PostLockInDetailsDto();
		postLockIn.setGuaranteedAnnualWithdrawalAmount(500.0);
		postLockIn.setIncomeBase(10000.0);
		postLockIn.setYtdGuaranteedAnnualWithdrawalAmount(200.0);
		pptDetail.setGlwbParticipantSummaryPostLockIn(postLockIn);
		
		// Perform the test
		 ParticipantDetailsDto result = itemWriter.accumSelect(pptDetail);
		 
		 // Verify the assertions
		 assertEquals(1000.0, result.getBalance(), 0.001);
		 assertEquals(500.0, result.getGlwbParticipantSummaryPostLockIn().getGuaranteedAnnualWithdrawalAmount(), 0.001);
		 assertEquals(10000.0, result.getGlwbParticipantSummaryPostLockIn().getIncomeBase(), 0.001);
		 assertEquals(200.0, result.getGlwbParticipantSummaryPostLockIn().getYtdGuaranteedAnnualWithdrawalAmount(), 0.001);
	}
--------------------------------------------------------------------------------------------

@Test
    void testSetJdbcTemplate() {
        dao.setJdbcTemplate(dataSource);

        verify(dataSource).getJdbcTemplate();
    }
