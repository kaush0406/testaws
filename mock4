import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.mail.MessagingException;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Collections;
import java.util.List;

import static org.mockito.Mockito.*;

public class YourClassTest {

    @Mock
    private MailUtil mailUtil;

    private YourClass yourClass;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        yourClass = new YourClass(mailUtil);
    }

    @Test
    public void testAfterJobCompletedWithFileExists() throws MessagingException {
        String reportPath = "reportPath";
        String errorReportPath = "errorReportPath";
        JobExecution jobExecution = mock(JobExecution.class);
        File file = mock(File.class);
        
        when(jobExecution.getStatus()).thenReturn(BatchStatus.COMPLETED);
        when(file.exists()).thenReturn(true);
        when(file.getPath()).thenReturn(errorReportPath);
        when(mailUtil.sendMessage(anyBoolean(), anyString(), anyString())).thenReturn(true);

        yourClass.afterJob(jobExecution);

        verify(mailUtil).sendMessage(false, reportPath, errorReportPath);
    }

    @Test
    public void testAfterJobCompletedWithoutFileExists() throws MessagingException {
        String reportPath = "reportPath";
        JobExecution jobExecution = mock(JobExecution.class);
        File file = mock(File.class);

        when(jobExecution.getStatus()).thenReturn(BatchStatus.COMPLETED);
        when(file.exists()).thenReturn(false);
        when(mailUtil.sendMessage(anyBoolean(), anyString())).thenReturn(true);

        yourClass.afterJob(jobExecution);

        verify(mailUtil).sendMessage(false, reportPath);
    }

    @Test
    public void testAfterJobFailed() throws MessagingException {
        String errorReportPath = "errorReportPath";
        JobExecution jobExecution = mock(JobExecution.class);
        File file = mock(File.class);

        when(jobExecution.getStatus()).thenReturn(BatchStatus.FAILED);
        when(file.getPath()).thenReturn(errorReportPath);
        when(mailUtil.sendMessage(anyBoolean(), anyString())).thenReturn(true);

        yourClass.afterJob(jobExecution);

        verify(mailUtil).sendMessage(true, errorReportPath);
    }

    @Test
    public void testGenerateErrorReport() throws IOException {
        String errorReportPath = "errorReportPath";
        JobExecution jobExecution = mock(JobExecution.class);
        PrintWriter writer = mock(PrintWriter.class);
        Throwable exception = mock(Throwable.class);

        when(jobExecution.getAllFailureExceptions()).thenReturn(Collections.singletonList(exception));
        when(exception.getMessage()).thenReturn("Exception message");
        whenNew(PrintWriter.class).withAnyArguments().thenReturn(writer);

        yourClass.generateErrorReport(jobExecution);

        verify(writer).println();
        verify(writer).println("Error Report:");
        verify(writer).println();
        verify(writer).println("Exception:");
        verify(writer).println("Exception message");
        verify(writer).println("Stack Trace:");
        verify(exception).printStackTrace(writer);
        verify(writer).flush();
    }
}
